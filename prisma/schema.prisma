generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
    referentialIntegrity = "prisma"
}

enum BookStatus {
    FINISHED
    WANT_TO_READ
    READING
}

model Book {
    id          String   @id @default(cuid())
    title       String
    author      String
    description String
    publishedAt DateTime
    numPages    Int
    coverSrc    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    reads       Read[]
    statuses    Status[]
}

model Read {
    id        String   @id @default(cuid())
    bookId    String
    book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    month     Int
    year      Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Status {
    bookId    String
    book      Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
    userId    String
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    rating    Int
    status    BookStatus
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    @@id([bookId, userId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    statuses      Status[]
    reads         Read[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
